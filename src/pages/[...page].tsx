import {
  IFooter,
  IHeader,
  IHeaderFooterContext,
} from '@/interfaces/footerHeaderRestAPIDataResponse';
import { IPageResponse } from '@/interfaces/pages.interfaces';
import {
  getAllPagesSlug,
  getFooterHeaderRestAPIData,
  getPageByUri,
} from '@/lib/api';
import { GetStaticPaths, GetStaticProps } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import styles from '@/styles/Home.module.scss';
import ErrorPage from 'next/error';
import { Button, Checkbox, Slider, Stack } from '@mui/material';
import { NextSeo } from 'next-seo';

const Page = ({
  page,
  header,
  footer,
}: {
  header: IHeader;
  footer: IFooter;
  page: IPageResponse;
}) => {
  if (!header || !footer) return null;
  // eslint-disable-next-line react-hooks/rules-of-hooks
  const router = useRouter();

  // eslint-disable-next-line react-hooks/rules-of-hooks
  const [isMounted, setMount] = useState(false);

  // eslint-disable-next-line react-hooks/rules-of-hooks
  useEffect(() => {
    setMount(true);
  }, []);
  const label = { inputProps: { 'aria-label': 'Checkbox demo' } };

  // const { data } = dataRest;

  if (!router.isFallback && !page?.slug) {
    return <ErrorPage statusCode={404} />;
  }
  // console.log('page', page);
  return (
    <>
      <NextSeo
        title={page?.seo?.title}
        description={page?.seo?.metaDesc}
        canonical={page?.seo?.canonical}
      />
      {/* <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head> */}
      <main className={styles.main}>
        <header className="w-full">
          <menu className="flex justify-between">
            {header.headerMenuItems.map((item) => (
              <li key={item.ID}>
                <Link href={item.pageSlug}>{item.title}</Link>
              </li>
            ))}
          </menu>
        </header>
        <div className="">{page.title}</div>
        <div className="">
          <Slider defaultValue={30} />
          <p>Стилизация через Tailwind</p>
          <Slider defaultValue={30} className="text-teal-600" />
          <p>Более глубокие элементы</p>
          <Slider
            defaultValue={30}
            className="text-teal-600"
            slotProps={{ thumb: { className: 'rounded-sm' } }}
          />
          <p>Стилизация псевдосостояний</p>
          <Slider defaultValue={30} classes={{ active: 'shadow-none' }} />
        </div>
        <div className="flex">
          <Checkbox {...label} defaultChecked />
          <Checkbox {...label} />
          <Checkbox {...label} disabled />
          <Checkbox {...label} disabled checked />
        </div>
        <div className="flex">
          <Stack spacing={2} direction="row">
            <Button variant="text">Text</Button>
            <Button variant="contained">Contained</Button>
            <Button variant="outlined">Outlined</Button>
          </Stack>
        </div>
        <ul>
          {/* {edges.map((item, index) => (
            <li key={index}>
              <Link href={`posts/${item.node.slug}`}>{item.node.title}</Link>
            </li>
          ))} */}
        </ul>
      </main>
    </>
  );
};

export default Page;

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const footerHeaderData = await getFooterHeaderRestAPIData();
  const header = footerHeaderData ? footerHeaderData.data.header : null;
  const footer = footerHeaderData ? footerHeaderData.data.footer : null;
  const page = await getPageByUri(`/${params.page}/`);

  return {
    props: {
      header,
      footer,
      page,
    },
    revalidate: 10,
  };
};

export const getStaticPaths: GetStaticPaths = async () => {
  const allPosts = await getAllPagesSlug();

  const slug = allPosts.edges.map(({ node }) => `/${node.slug}`);
  // Exclusion of certain pages by filter (Disconnected)
  const slugWithFilter = slug;
  // const slugWithFilter = filterSlugPages(slug);
  // console.log(slugWithFilter);

  return {
    // paths: allPosts.edges.map(({ node }) => `/${node.slug}`) || [],
    paths: slugWithFilter || [],
    fallback: true,
  };
};
